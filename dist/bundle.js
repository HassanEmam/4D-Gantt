/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/classes/bar.ts":
/*!****************************!*\
  !*** ./src/classes/bar.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Bar\": () => (/* binding */ Bar)\n/* harmony export */ });\nclass Bar {\n    constructor(x, y, width, height, context, color, fontColor, name, options) {\n        this.width = width;\n        this.height = height;\n        this.x = x;\n        this.y = y;\n        this.color = color;\n        this.fontColor = fontColor;\n        this.name = name;\n        this.context = context;\n        this.options = options;\n        this.color = this.options.barColor;\n        this.hoverColor = this.options.barColorHover;\n    }\n    draw(color, fontColor, name) {\n        color\n            ? (this.color = color)\n            : this.color\n                ? this.color\n                : (this.color = \"lightgreen\");\n        fontColor\n            ? (this.fontColor = fontColor)\n            : this.fontColor\n                ? this.fontColor\n                : (this.fontColor = \"white\");\n        name ? (this.name = name) : this.name ? this.name : (this.name = \"Task\");\n        if (this.name) {\n            this.context.globalCompositeOperation = \"source-over\";\n            this.context.textAlign = \"center\";\n            this.context.textBaseline = \"middle\";\n            let fontSize = Math.min(this.width / 1.5, this.height / 1.5);\n            this.context.font = `${fontSize}px Arial`;\n            this.context.fillStyle = this.color;\n            this.context.fillRect(this.x, this.y, this.width, this.height);\n            this.context.fillStyle = this.fontColor;\n            // this.context.fillStyle = \"black\";\n            this.context.fillText(this.name, this.x + this.width / 2, this.y + this.height / 2);\n        }\n    }\n    update(x, y) {\n        this.draw();\n        this.x = x;\n        this.y = y;\n    }\n    collision(x, y) {\n        if (x >= this.x &&\n            x <= this.x + this.width &&\n            y >= this.y &&\n            y <= this.y + this.height) {\n            this.color = this.options.barColorHover;\n            this.draw();\n            return true;\n        }\n        else {\n            this.color = this.options.barColor;\n            this.draw();\n            return false;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://my-webpack-project/./src/classes/bar.ts?");

/***/ }),

/***/ "./src/classes/dateLine.ts":
/*!*********************************!*\
  !*** ./src/classes/dateLine.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DateLine\": () => (/* binding */ DateLine)\n/* harmony export */ });\n/* harmony import */ var _utils_helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/helper */ \"./src/utils/helper.ts\");\n/* harmony import */ var _utils_scales__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/scales */ \"./src/utils/scales.ts\");\n\n\nclass DateLine {\n    constructor(ctx, canvas, options, date) {\n        this.options = options;\n        this.dateLine = date;\n        this.canvas = canvas;\n        this.ctx = ctx;\n        let maxmin = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.minmax)(this.options.data);\n        this.minDate = maxmin[0];\n        this.maxDate = maxmin[1];\n        this.maxValue = maxmin[1].getTime();\n        this.minValue = maxmin[0].getTime();\n        this.xpos = (0,_utils_scales__WEBPACK_IMPORTED_MODULE_1__.scaleX)(this.dateLine, this.minDate, this.maxDate, this.canvas.width);\n    }\n    draw() {\n        this.ctx.beginPath();\n        this.ctx.strokeStyle = \"blue\";\n        this.ctx.lineWidth = 3;\n        this.ctx.moveTo(this.xpos + +this.options.timeLineColumnWidth / 2, +this.options.timeLineHeight);\n        this.ctx.lineTo(this.xpos + this.options.timeLineColumnWidth / 2, this.canvas.height + this.options.timeLineHeight);\n        this.ctx.stroke();\n    }\n    update(date) {\n        this.dateLine = date;\n        this.xpos = (0,_utils_scales__WEBPACK_IMPORTED_MODULE_1__.scaleX)(this.dateLine, this.minDate, this.maxDate, this.canvas.width);\n        this.draw();\n    }\n    collision(x, y) {\n        if (this.xpos + this.options.timeLineColumnWidth / 2 - 5 <= x &&\n            this.xpos + this.options.timeLineColumnWidth / 2 + 5 >= x) {\n            this.ctx.beginPath();\n            this.ctx.strokeStyle = \"red\";\n            this.ctx.lineWidth = 3;\n            this.ctx.moveTo(this.xpos + this.options.timeLineColumnWidth / 2, +this.options.timeLineHeight);\n            this.ctx.lineTo(this.xpos + this.options.timeLineColumnWidth / 2, this.canvas.height + this.options.timeLineHeight);\n            this.ctx.stroke();\n        }\n        else {\n            this.ctx.beginPath();\n            this.ctx.strokeStyle = \"blue\";\n            this.ctx.lineWidth = 3;\n            this.ctx.moveTo(this.xpos + this.options.timeLineColumnWidth / 2, +this.options.timeLineHeight);\n            this.ctx.lineTo(this.xpos + this.options.timeLineColumnWidth / 2, this.canvas.height + this.options.timeLineHeight);\n            this.ctx.stroke();\n        }\n    }\n}\n\n\n//# sourceURL=webpack://my-webpack-project/./src/classes/dateLine.ts?");

/***/ }),

/***/ "./src/classes/ganttChart.ts":
/*!***********************************!*\
  !*** ./src/classes/ganttChart.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GanttChart\": () => (/* binding */ GanttChart)\n/* harmony export */ });\n/* harmony import */ var _tasks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tasks */ \"./src/classes/tasks.ts\");\n/* harmony import */ var _dateLine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dateLine */ \"./src/classes/dateLine.ts\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./table */ \"./src/classes/table.ts\");\n/* harmony import */ var _utils_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/helper */ \"./src/utils/helper.ts\");\n/* harmony import */ var _timeline__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./timeline */ \"./src/classes/timeline.ts\");\n\n\n\n\n\nclass GanttChart {\n    constructor(options) {\n        this.initStyle();\n        this.options = options;\n        this.rows = [];\n        this.cells = [];\n        this.container = options.container;\n        this.visibleTasks = this.options.data;\n        this.canvas = document.createElement(\"canvas\");\n        // this.canvas.setAttribute(\"id\", \"gantt_canvas__chart__\");\n        this.tableCanvas = document.createElement(\"canvas\");\n        this.chartDiv = document.createElement(\"div\");\n        this.init();\n        this.ctx = this.canvas.getContext(\"2d\");\n        this.tableCtx = this.tableCanvas.getContext(\"2d\");\n        this.colors = options.colors;\n        this.titleOptions = options.titleOptions;\n        let maxmin = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.minmax)(this.options.data);\n        this.maxValue = maxmin[1].getTime();\n        this.minValue = maxmin[0].getTime();\n        this.minDate = maxmin[0];\n        this.maxDate = maxmin[1];\n        let duration = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.dayDiff)(this.minDate, this.maxDate) + 1;\n        if (this.options.timeLineHeight) {\n            this.timeLineHeight = this.options.timeLineHeight;\n        }\n        else {\n            this.timeLineHeight = 120;\n            this.options.timeLineHeight = this.timeLineHeight;\n        }\n        this.canvas.width = this.options.timeLineColumnWidth * duration;\n        this.dateLine = new _dateLine__WEBPACK_IMPORTED_MODULE_1__.DateLine(this.ctx, this.canvas, this.options, this.minDate);\n        this.timeLine = new _timeline__WEBPACK_IMPORTED_MODULE_4__.TimeLine(this.ctx, this.canvas, this.options, this);\n        this.tasks = [];\n        let currentDate = new Date(2020, 1, 15);\n        this.initEvents();\n    }\n    initStyle() {\n        let styleEl = document.createElement(\"style\");\n        styleEl.appendChild(document.createTextNode(`#gantt_canvas__chart__::-webkit-scrollbar {width:10px;} \n         #gantt_canvas__chart__::-webkit-scrollbar-track{box-shadow:inset 0 0 5px grey; border-radius:10px;}\n         #gantt_canvas__chart__::-webkit-scrollbar-thumb{background:lightgray; border-radius:10px}\n         #gantt_canvas__chart__::-webkit-scrollbar-thumb:hover{background:gray;}\n\n         #gantt_canvas__chart__table::-webkit-scrollbar {width:10px;} \n         #gantt_canvas__chart__table::-webkit-scrollbar-track{box-shadow:inset 0 0 5px grey; border-radius:10px;}\n         #gantt_canvas__chart__table::-webkit-scrollbar-thumb{background:lightgray; border-radius:10px}\n         #gantt_canvas__chart__table::-webkit-scrollbar-thumb:hover{background:gray;}\n         .level1 td:first-child {\n  padding-left: 15px;\n}\n\ntable {\n  border-collapse: collapse;\n  width: 100%;\n  position: relative;\n}\n\ntable th {\n  background: lightgray;\n  position: sticky;\n  top: 0;\n}\n\ntable td {\n  border: 1px solid #eee;\n}\n.level2 td:first-child {\n  padding-left: 30px;\n}\n\n.level3 td:first-child {\n  padding-left: 45px;\n}\n\n.level4 td:first-child {\n  padding-left: 60px;\n}\n\n.level5 td:first-child {\n  padding-left: 75px;\n}\n\n.level6 td:first-child {\n  padding-left: 90px;\n}\n\n.level7 td:first-child {\n  padding-left: 105px;\n}\n.table-collapse .toggle {\n  width: 0;\n  height: 0;\n  border-left: 0.25rem solid transparent;\n  border-right: 0.25rem solid transparent;\n  border-top: 0.5rem solid var(--dark-blue);\n  content: \"\\\\229F\";\n\n  }\n\n.table-expand .toggle {\n  width: 0;\n  height: 0;\n  border-top: 0.25rem solid transparent;\n  border-left: 0.5rem solid var(--dark-blue);\n  border-bottom: 0.25rem solid transparent;\n}\n\n.toggle {\n  height: 9px;\n  width: 9px;\n  display: inline-block;\n  margin: 0.2rem;\n  margin-right:1rem;\n\n}\n\n.toggle:before{\n  content: \"\\\\229F\";\n  color:\"black\";\n  display:inline-block;\n  margin-right:1rem;\n}\n.expanded {\n  height: 9px;\n  width: 9px;\n  display: inline-block;\n  margin: 0.2rem;\n  margin-right:1rem;\n}\n\n.expanded:before{\n  content:\"\\\\229E\";\n  color:\"black\";\n  display:inline-block;\n  margin: 0.2rem;\n  margin-right:1rem;\n}\n\ntr:hover {\n  background-color: #d6eeee;\n}\n        `));\n        document.getElementsByTagName(\"head\")[0].append(styleEl);\n    }\n    init() {\n        this.tablediv = document.createElement(\"div\");\n        this.tablediv.id = \"gantt_canvas__chart__table\";\n        this.tablediv.style.display = \"inline-block\";\n        this.tablediv.style.width = `${this.options.table.width + 20}px`;\n        this.tablediv.style.overflow = \"auto\";\n        this.tablediv.style.height = \"100%\";\n        this.chartDiv.setAttribute(\"id\", \"gantt_canvas__chart__\");\n        this.chartDiv.appendChild(this.canvas);\n        this.chartDiv.style.display = \"inline-block\";\n        this.chartDiv.style.height = \"100%\";\n        const contWidth = this.container.clientWidth - this.options.table.width - 50;\n        this.chartDiv.style.overflow = \"auto\";\n        this.chartDiv.style.width = `${contWidth}px`;\n        this.chartDiv.style.margin = \"0px\";\n        this.tablediv.appendChild(this.tableCanvas);\n        this.container.appendChild(this.tablediv);\n        this.container.appendChild(this.chartDiv);\n        this.canvas.height =\n            this.options.timeLineHeight +\n                this.options.rowHeight * this.options.data.length;\n        if (this.options.table.width) {\n            this.tableWidth = this.options.table.width;\n        }\n        else {\n            this.tableWidth = 400;\n            this.options.table.width = this.tableWidth;\n        }\n        if (this.options.dataDate) {\n            this.dataDate = this.options.dataDate;\n        }\n        else {\n            this.dataDate = new Date();\n            this.options.dataDate = this.dataDate;\n        }\n        this.tableCanvas.height = this.canvas.height;\n        this.tableCanvas.width = this.tableWidth;\n    }\n    /**\n     * @description - initialize events\n     */\n    initEvents() {\n        this.tableCanvas.addEventListener(\"mousemove\", (e) => {\n            let parent = e.target.parentElement;\n            let offsetpos = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.recursive_offset)(e.target);\n            let posX = e.clientX + offsetpos.x + parent.offsetLeft;\n            let posY = e.clientY + offsetpos.y + parent.offsetTop + this.canvas.offsetTop;\n            for (let row of this.rows) {\n                row.collision(posX, posY);\n            }\n        });\n        this.tableCanvas.addEventListener(\"click\", (e) => {\n            let parent = e.target.parentElement;\n            let offsetpos = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.recursive_offset)(e.target);\n            let posX = e.clientX + offsetpos.x + parent.offsetLeft;\n            let posY = e.clientY + offsetpos.y + parent.offsetTop + this.canvas.offsetTop;\n            for (let cell of this.cells) {\n                cell.collision(posX, posY);\n            }\n        });\n        this.canvas.addEventListener(\"mousemove\", (e) => {\n            let parent = e.target.parentElement;\n            let offsetpos = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.recursive_offset)(e.target);\n            let posX = e.clientX + offsetpos.x + parent.offsetLeft;\n            let posY = e.clientY + offsetpos.y + parent.offsetTop + this.canvas.offsetTop;\n            for (let task of this.tasks) {\n                task.collision(posX, posY);\n            }\n            if (this.dateLine) {\n                this.dateLine.collision(posX, posY);\n            }\n        });\n        this.tablediv.addEventListener(\"scroll\", (event) => {\n            this.chartDiv.scrollTop = event.target.scrollTop;\n        });\n        this.chartDiv.addEventListener(\"scroll\", (event) => {\n            this.tablediv.scrollTop = event.target.scrollTop;\n        });\n    }\n    drawGridLines() {\n        var canvasActualHeight = this.canvas.height - this.options.timeLineHeight;\n        var canvasActualWidth = this.canvas.width;\n        var gridValue = 0;\n        // while (gridValue <= this.maxValue) {\n        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.drawLine)(this.ctx, 0, this.options.timeLineHeight, canvasActualWidth, this.options.timeLineHeight, \"black\");\n        // horizontal grids between tasks\n        let rowHeight = this.options.rowHeight;\n        for (let i in this.visibleTasks) {\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.drawLine)(this.ctx, 0, this.options.timeLineHeight + rowHeight * (parseInt(i) + 1), canvasActualWidth + this.options.timeLineColumnWidth, this.options.timeLineHeight + rowHeight * (parseInt(i) + 1), \"lightgray\");\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.drawLine)(this.tableCtx, 0, this.options.timeLineHeight + rowHeight * (parseInt(i) + 1), this.options.table.width, this.options.timeLineHeight + rowHeight * (parseInt(i) + 1), \"black\");\n        }\n        gridValue += this.options.gridScale;\n        // }\n    }\n    drawDateLine() {\n        this.dateLine = new _dateLine__WEBPACK_IMPORTED_MODULE_1__.DateLine(this.ctx, this.canvas, this.options, this.dataDate);\n        this.dateLine.draw();\n    }\n    drawTimeLine() {\n        this.timeLine = new _timeline__WEBPACK_IMPORTED_MODULE_4__.TimeLine(this.ctx, this.canvas, this.options, this);\n        this.timeLine.draw();\n    }\n    drawTable(update = false) {\n        if (update !== true) {\n            this.table = new _table__WEBPACK_IMPORTED_MODULE_2__.Table(this.tableCtx, this.options.colors[0], this.options.barColorHover, \"black\", [\"id\", \"name\", \"start\", \"end\"], this.options, this);\n        }\n        this.table.draw(update);\n    }\n    draw() {\n        this.drawGridLines();\n        this.drawTable();\n        // this.drawBars();\n        this.drawTimeLine();\n        this.drawDateLine();\n        this.tasksData = new _tasks__WEBPACK_IMPORTED_MODULE_0__.Tasks(this.options.data, this);\n    }\n    update() {\n        let duration = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.dayDiff)(this.minDate, this.maxDate) + 1;\n        this.canvas.width =\n            this.tableWidth + this.options.timeLineColumnWidth * duration;\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height + this.options.timeLineHeight);\n        this.tasks = [];\n        this.dateLine = null;\n        this.draw();\n    }\n    updateGantt() {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height + this.options.timeLineHeight);\n        this.visibleTasks = [];\n        for (let task of this.options.data) {\n            if (task.visible !== false) {\n                this.visibleTasks.push(task);\n            }\n        }\n        this.canvas.height =\n            this.options.timeLineHeight +\n                this.options.rowHeight * this.visibleTasks.length;\n        this.tableCanvas.height = this.canvas.height;\n        let maxmin = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.minmax)(this.visibleTasks);\n        this.maxValue = maxmin[1].getTime();\n        this.minValue = maxmin[0].getTime();\n        this.minDate = maxmin[0];\n        this.maxDate = maxmin[1];\n        this.tasks = [];\n        this.dateLine = null;\n        // this.drawTable(true);\n        this.drawGridLines();\n        this.drawTimeLine();\n        this.drawDateLine();\n        console.log(\"visibleTasks from Gantt\", this.visibleTasks);\n        // let nestedData = this.tasksData.list_to_tree(this.visibleTasks, true);\n        this.tasksData = new _tasks__WEBPACK_IMPORTED_MODULE_0__.Tasks(this.visibleTasks, this);\n        // this.tasksData.update();\n        // draw bars\n        // let counter = 0;\n        // for (let element of this.visibleTasks) {\n        //   let x = scaleX(\n        //     element.start,\n        //     this.minDate,\n        //     this.maxDate,\n        //     this.canvas.width\n        //   );\n        //   let y =\n        //     counter * this.options.rowHeight +\n        //     this.options.timeLineHeight +\n        //     this.options.rowHeight * 0.2;\n        //   let width =\n        //     scaleX(element.end, this.minDate, this.maxDate, this.canvas.width) - x;\n        //   let height = this.options.rowHeight * 0.6;\n        //   let bar = new Bar(\n        //     x,\n        //     y,\n        //     width,\n        //     height,\n        //     this.ctx,\n        //     \"lightgreen\",\n        //     \"black\",\n        //     element.name,\n        //     this.options\n        //   );\n        //   bar.draw();\n        //   counter++;\n        // }\n    }\n}\n\n\n//# sourceURL=webpack://my-webpack-project/./src/classes/ganttChart.ts?");

/***/ }),

/***/ "./src/classes/rowCell.ts":
/*!********************************!*\
  !*** ./src/classes/rowCell.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RowCell\": () => (/* binding */ RowCell)\n/* harmony export */ });\nclass RowCell {\n    constructor(row, cell, data) {\n        this.row = row;\n        this.data = data;\n        this.index = cell;\n        this.expanded = this.data.expanded || true;\n        this.color = \"rgba(255,255,255,1)\";\n        this.x = (this.index * this.row.width) / this.row.columns.length;\n        this.y = this.row.y;\n        this.width = this.row.width / this.row.columns.length;\n        this.height = this.row.height;\n        this.text = data[this.row.columns[this.index]];\n        this.draw();\n        // this.row.gantt.cells.push(this);\n    }\n    draw() {\n        var _a;\n        let x;\n        if (!this.row.width) {\n            this.row.width = 400;\n        }\n        let hasChilds = false;\n        if (this.data.children.length > 0) {\n            hasChilds = true;\n        }\n        x = this.x;\n        this.row.context.fillStyle = \"white\";\n        this.row.context.fillRect(this.x + 5, this.y + 5, this.width - 10, this.height - 10);\n        this.row.context.fillStyle =\n            ((_a = this.row.options.table.header) === null || _a === void 0 ? void 0 : _a.fontColor) || \"black\";\n        this.row.context.textBaseline = \"middle\";\n        this.row.context.font = `14px Arial`;\n        let text;\n        if (this.data[this.row.columns[this.index]] instanceof Date) {\n            text = this.data[this.row.columns[this.index]]\n                .toLocaleString(\"en-GB\")\n                .split(\",\")[0];\n        }\n        else {\n            text = this.data[this.row.columns[this.index]].toString();\n        }\n        if (this.index === 0) {\n            x = (this.data.level || 0) * 30 + this.index * this.width;\n            if (hasChilds) {\n                let addChar;\n                if (this.expanded === false) {\n                    addChar = \"\\u{229E}\";\n                }\n                else {\n                    addChar = \"\\u{229F}\";\n                }\n                text = addChar + \"\\t\\t\" + text;\n            }\n            this.row.context.textAlign = \"left\";\n        }\n        else {\n            this.row.context.textAlign = \"center\";\n            x = x + this.width / 2;\n        }\n        this.row.context.fillText(text, x, this.y + this.height / 2);\n        this.row.context.strokeStyle = \"black\";\n    }\n    update() { }\n    collision(x, y) {\n        if (x >= this.x &&\n            x <= this.x + this.width &&\n            y >= this.y &&\n            y <= this.y + this.height) {\n            this.color = \"rgba(173,216,230,0.1)\";\n            if (this.index === 0) {\n                this.row.heilighted = false;\n                this.expanded = !this.expanded;\n                this.data.expanded = !this.data.expanded;\n                // this.draw();\n            }\n            this.draw();\n            return true;\n        }\n        else {\n            this.color = \"rgba(255,255,255,1)\";\n            //   this.draw();\n            return false;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://my-webpack-project/./src/classes/rowCell.ts?");

/***/ }),

/***/ "./src/classes/table.ts":
/*!******************************!*\
  !*** ./src/classes/table.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Table\": () => (/* binding */ Table)\n/* harmony export */ });\n/* harmony import */ var _tableRow__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tableRow */ \"./src/classes/tableRow.ts\");\n\nclass Table {\n    constructor(context, color, hoverColor, fontColor, columns, options, gantt) {\n        this.nextUntil = function (elem, elements, filter) {\n            var siblings = [];\n            elem = elem.nextElementSibling;\n            while (elem) {\n                if (elements.includes(elem))\n                    break;\n                if (filter && !elem.matches(filter)) {\n                    elem = elem.nextElementSibling;\n                    continue;\n                }\n                siblings.push(elem);\n                elem = elem.nextElementSibling;\n            }\n            return siblings;\n        };\n        this.color = color;\n        this.gantt = gantt;\n        this.fontColor = fontColor;\n        this.context = context;\n        this.options = options;\n        this.hoverColor = hoverColor;\n        this.rowCounter = 0;\n        this.columns = columns;\n        this.tableDOM = document.createElement(\"table\");\n        this.heading = document.createElement(\"thead\");\n        this.tableBody = document.createElement(\"tbody\");\n        this.container = this.gantt.tablediv;\n    }\n    drawHeadings(update = false) {\n        if (!update === true) {\n            this.container.innerHTML = \"\";\n            let noCols = this.columns.length;\n            let tableWidth = this.options.table.width;\n            let colWidth = (tableWidth ? tableWidth : 400) / noCols;\n            const heading = document.createElement(\"thead\");\n            const row = document.createElement(\"tr\");\n            row.style.height = `${this.options.timeLineHeight}px`;\n            for (let colidx = 0; colidx < this.columns.length; colidx++) {\n                const col = document.createElement(\"th\");\n                col.innerText = this.columns[colidx];\n                col.style.width = `${colWidth}px`;\n                row.appendChild(col);\n            }\n            heading.appendChild(row);\n            this.tableDOM.appendChild(heading);\n            this.container.appendChild(this.tableDOM);\n            this.container.appendChild(this.tableBody);\n        }\n    }\n    drawRow(data, update = false) {\n        this.tableBody.innerHTML = \"\";\n        this.rowCounter = 0;\n        if (data.children.length > 0) {\n            if (data.expanded && data.expanded === true) {\n                data.expanded = true;\n            }\n            else if (data.expanded === undefined) {\n                data.expanded = true;\n            }\n            else {\n                data.expanded = false;\n            }\n        }\n        this.createLeaf(data, update);\n        if (data.children.length > 0) {\n            data.children.forEach((child) => {\n                this.createBranch(child, update);\n            });\n        }\n        // else {\n        //   this.createLeaf(data, update);\n        // }\n        this.initEvents();\n    }\n    createBranch(data, update = false) {\n        this.createLeaf(data, update);\n        console.log(\"CreatBranch \", data);\n        if (data.expanded && data.expanded === true) {\n            for (let row of data.children) {\n                if (row.children.length === 0) {\n                    this.createLeaf(row, update);\n                }\n                else {\n                    this.createBranch(row, update);\n                }\n            }\n        }\n    }\n    createLeaf(data, update = false) {\n        const tableRow = new _tableRow__WEBPACK_IMPORTED_MODULE_0__.TableRow(this.context, this.gantt, data, this.options, this.rowCounter, this.columns);\n        if (update === true) {\n            this.rowCounter++;\n            return;\n        }\n        else {\n            const row = document.createElement(\"tr\");\n            row.style.height = `${this.options.rowHeight}px`;\n            row.classList.add(`level${data.level}`);\n            row.classList.add(\"table-collapse\");\n            row.setAttribute(\"data-depth\", data.level.toString());\n            row.id = `ganttTable__${data.id.toString()}`;\n            // row.setAttribute(\"data\", data);\n            let toggle;\n            for (let colidx = 0; colidx < this.columns.length; colidx++) {\n                const col = document.createElement(\"td\");\n                col.style.width = `${this.options.table.width / this.columns.length}px`;\n                if (data[this.columns[colidx]] instanceof Date) {\n                    col.innerText = data[this.columns[colidx]].toLocaleDateString(\"en-GB\", {\n                        day: \"numeric\",\n                        month: \"2-digit\",\n                        year: \"numeric\",\n                    });\n                }\n                else {\n                    col.innerText = data[this.columns[colidx]];\n                }\n                if (data.children.length === 0 && data.hasChildren === true) {\n                    let childs = this.gantt.options.data.filter((d) => d.parent === data.id);\n                    if (childs.length > 0) {\n                        data.hasChildren = true;\n                    }\n                    else {\n                        data.hasChildren = false;\n                    }\n                }\n                if (colidx === 0) {\n                    if (data.children.length > 0 || data.hasChildren === true) {\n                        toggle = document.createElement(\"span\");\n                        toggle.id = `gantt__span__${data.id.toString()}`;\n                        if (data.expanded && data.expanded === true) {\n                            toggle.classList.add(\"toggle\");\n                        }\n                        else {\n                            toggle.classList.add(\"expanded\");\n                        }\n                        toggle.classList.add(\"table-collapse\");\n                        col.insertBefore(toggle, col.firstChild);\n                    }\n                }\n                row.appendChild(col);\n                this.tableBody.appendChild(row);\n            }\n            if (data.children.length > 0 || data.hasChildren === true) {\n                toggle.addEventListener(\"click\", () => {\n                    this.addEvents(toggle);\n                });\n            }\n            this.rowCounter++;\n        }\n    }\n    addEvents(toggle) {\n        console.log(toggle.classList, toggle);\n        const tr = toggle.closest(\"tr\");\n        const parent_id = parseInt(tr.id.split(\"__\")[1]);\n        const childs = this.findChildren(tr);\n        // if element has class toggle then remove it and collapse\n        if (toggle.classList.contains(\"toggle\")) {\n            // console.log(\"first condition\", toggle.classList);\n            toggle.classList.remove(\"toggle\");\n            toggle.classList.add(\"expanded\");\n            // console.log(\"first condition\", toggle.classList);\n            childs.forEach((child) => {\n                const child_id = parseInt(child.id.replace(\"ganttTable__\", \"\"));\n                this.gantt.options.data.filter((d) => d.id == child_id)[0].visible =\n                    false;\n                // child.style.display = \"none\";\n            });\n            this.gantt.options.data.filter((d) => d.id == parent_id)[0].expanded =\n                false;\n            this.gantt.options.data.filter((d) => d.id == parent_id)[0].hasChildren =\n                true;\n            // console.log(\"data\", this.gantt.options.data);\n            this.gantt.updateGantt();\n        }\n        else if (toggle.classList.contains(\"expanded\")) {\n            console.log(\"second condition\");\n            toggle.classList.remove(\"expanded\");\n            toggle.classList.add(\"toggle\");\n            let current = this.gantt.options.data.filter((d) => d.id == parent_id)[0];\n            const childss = this.getAllChilds(current);\n            console.log(\"childs\", childss);\n            childss.forEach((child) => {\n                child.visible = true;\n                let childChildren = this.gantt.options.data.filter((d) => d.parent == child.id);\n                console.log(\"childChildren\", child.id, childChildren.length);\n                if (childChildren.length > 0) {\n                    child.hasChildren = true;\n                }\n                else {\n                    child.hasChildren = false;\n                }\n                // child.hasChildren =  ? true : false;\n                // child.style.display = \"none\";\n            });\n            this.gantt.options.data.filter((d) => d.id == parent_id)[0].expanded =\n                true;\n            this.gantt.options.data.filter((d) => d.id == parent_id)[0].hasChildren =\n                true;\n            this.gantt.updateGantt();\n        }\n    }\n    getAllChilds(data) {\n        let children = [];\n        let childs = this.gantt.options.data.filter((d) => d.parent === data.id);\n        if (childs.length > 0) {\n            childs.forEach((child) => {\n                children.push(child);\n                children = children.concat(this.getAllChilds(child));\n            });\n        }\n        return children;\n    }\n    draw(update = false) {\n        if (update === true) {\n            this.rowCounter = 0;\n        }\n        // this.rowCounter = 0;\n        this.drawHeadings(update);\n        // this.drawRows();\n    }\n    initEvents() {\n        const toggles = document.getElementsByTagName(\"span\");\n        for (let el of toggles) {\n        }\n    }\n    findChildren(tr) {\n        var depth = tr.dataset.depth;\n        var elements = [...document.querySelectorAll(\"tr\")].filter(function (element) {\n            return element.dataset.depth <= depth;\n        });\n        var next = this.nextUntil(tr, elements, null);\n        return next;\n    }\n    findByKey(obj, keyToFind) {\n        for (let ob of obj) {\n            if (ob[\"id\"] === keyToFind) {\n                ob.visible = false;\n                return obj;\n            }\n            if (ob.children.length > 0) {\n                let childSearch = this.findByKey(ob.children, keyToFind);\n                if (childSearch) {\n                    return childSearch;\n                }\n            }\n        }\n        return null;\n    }\n    findDataChildren(tasks) {\n        const childs = [];\n        for (let task of tasks) {\n            // task.visible = false;\n            if (task.children.length > 0) {\n                this.findDataChildren(task.children);\n            }\n        }\n    }\n    removeAllChildren(element) {\n        while (element.firstChild) {\n            element.removeChild(element.firstChild);\n        }\n    }\n    update() { }\n}\n\n\n//# sourceURL=webpack://my-webpack-project/./src/classes/table.ts?");

/***/ }),

/***/ "./src/classes/tableRow.ts":
/*!*********************************!*\
  !*** ./src/classes/tableRow.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TableRow\": () => (/* binding */ TableRow)\n/* harmony export */ });\n/* harmony import */ var _rowCell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rowCell */ \"./src/classes/rowCell.ts\");\n/* harmony import */ var _utils_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/helper */ \"./src/utils/helper.ts\");\n/* harmony import */ var _utils_scales__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/scales */ \"./src/utils/scales.ts\");\n/* harmony import */ var _bar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bar */ \"./src/classes/bar.ts\");\n\n\n\n\nclass TableRow {\n    constructor(ctx, gantt, data, options, rowIndex, columns) {\n        this.columns = [];\n        this.context = ctx;\n        // this.nestedData = data;\n        this.x = 0;\n        this.cells = [];\n        this.options = options;\n        this.width = options.table.width;\n        this.height = this.options.rowHeight;\n        this.rowCounter = rowIndex;\n        this.heilighted = false;\n        this.y =\n            this.options.timeLineHeight + this.options.rowHeight * this.rowCounter;\n        this.gantt = gantt;\n        this.data = data;\n        this.columns = columns;\n        this.color = \"rgba(255,255,255,0)\";\n        this.drawBar();\n    }\n    drawBar() {\n        var canvasActualWidth = this.gantt.canvas.width;\n        var values = Object.values(this.data);\n        let taskData = this.data;\n        if (!this.options.rowHeight) {\n            this.options.rowHeight = 40;\n        }\n        let yOffset = this.options.rowHeight * this.rowCounter + this.options.rowHeight * 0.2;\n        let xStart = (0,_utils_scales__WEBPACK_IMPORTED_MODULE_2__.scaleX)(taskData.start, this.gantt.minDate, this.gantt.maxDate, canvasActualWidth);\n        let xEnd = (0,_utils_scales__WEBPACK_IMPORTED_MODULE_2__.scaleX)((0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.addDays)(taskData.end, 1), this.gantt.minDate, this.gantt.maxDate, canvasActualWidth);\n        let barWidth = xEnd - xStart;\n        if (!this.options.timeLineHeight) {\n            this.options.timeLineHeight = 120;\n        }\n        let bar = new _bar__WEBPACK_IMPORTED_MODULE_3__.Bar(xStart, yOffset + this.options.timeLineHeight, barWidth, this.options.rowHeight * 0.6, this.gantt.ctx, this.options.barColor, \"white\", taskData.name, this.options);\n        this.gantt.tasks.push(bar);\n        bar.draw();\n        this.gantt.ctx.restore();\n    }\n    draw() {\n        // this.drawBar();\n        this.cells = [];\n        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.drawBar)(this.context, this.x, this.y, this.width, this.height, this.color);\n        if (!this.options.timeLineHeight) {\n            this.options.timeLineHeight = 120;\n        }\n        if (!this.options.rowHeight) {\n            this.options.rowHeight = 120;\n        }\n        let y = this.options.timeLineHeight + this.options.rowHeight * this.rowCounter;\n        let hasChilds = false;\n        if (this.data.children.length > 0) {\n            hasChilds = true;\n        }\n        for (let colidx = 0; colidx < this.columns.length; colidx++) {\n            let cell = new _rowCell__WEBPACK_IMPORTED_MODULE_0__.RowCell(this, colidx, this.data);\n            this.cells.push(cell);\n        }\n        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.drawLine)(this.context, this.x, this.y, this.x + this.width, this.y, \"black\");\n    }\n    collision(x, y) {\n        if (x >= this.x &&\n            x <= this.x + this.width &&\n            y >= this.y &&\n            y <= this.y + this.height) {\n            if (!this.heilighted) {\n                this.color = \"rgba(173,216,230,0.1)\";\n                this.draw();\n                this.heilighted = true;\n            }\n            return true;\n        }\n        else {\n            this.color = \"rgba(255,255,255,1)\";\n            this.draw();\n            this.heilighted = false;\n            return false;\n        }\n    }\n    update() { }\n}\n\n\n//# sourceURL=webpack://my-webpack-project/./src/classes/tableRow.ts?");

/***/ }),

/***/ "./src/classes/tasks.ts":
/*!******************************!*\
  !*** ./src/classes/tasks.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Tasks\": () => (/* binding */ Tasks)\n/* harmony export */ });\nclass Tasks {\n    constructor(data, gantt) {\n        this.data = data;\n        this.gantt = gantt;\n        this.nestedData = this.list_to_tree(this.data);\n        this.createTree(false);\n    }\n    createTree(update = false) {\n        for (let i = 0; i < this.nestedData.length; i++) {\n            const element = this.nestedData[i];\n            // console.log(\"element\", element);\n            this.gantt.table.drawRow(element, update);\n            // for (let j = 0; j < element.children.length; j++) {\n            //   this.constructTree(element.children[j]);\n            // }\n        }\n    }\n    constructTree(task, update = false) {\n        if (task.children.length === 0) {\n            this.gantt.table.drawRow(task);\n            return;\n        }\n        this.gantt.table.drawRow(task, update);\n        for (let i = 0; i < task.children.length; i++) {\n            this.constructTree(task.children[i], update);\n        }\n    }\n    list_to_tree(dataset, update = false) {\n        const hashTable = Object.create(null);\n        dataset.forEach((aData) => (hashTable[aData.id] = Object.assign(Object.assign({}, aData), { children: [], level: 0 })));\n        const dataTree = [];\n        dataset.forEach((aData) => {\n            if (aData.parent) {\n                hashTable[aData.id].level = hashTable[aData.parent].level + 1;\n                if (update) {\n                    hashTable[aData.id].visible = aData.visible;\n                    hashTable[aData.id].expanded = aData.expanded;\n                }\n                else {\n                    if (aData.visible === undefined) {\n                        hashTable[aData.id].visible = true;\n                    }\n                    else {\n                        hashTable[aData.id].visible = aData.visible;\n                    }\n                    if (aData.expanded === undefined) {\n                        hashTable[aData.id].expanded = true;\n                    }\n                    else {\n                        hashTable[aData.id].expanded = aData.expanded;\n                    }\n                    if (aData.hasChildren !== undefined) {\n                        hashTable[aData.id].hasChildren = true;\n                    }\n                    else {\n                        hashTable[aData.id].hasChildren = aData.hasChildren;\n                    }\n                    // hashTable[aData.id].expanded = true;\n                }\n                hashTable[aData.parent].children.push(hashTable[aData.id]);\n            }\n            else {\n                dataTree.push(hashTable[aData.id]);\n            }\n        });\n        return dataTree;\n    }\n    update() {\n        // this.gantt.canvas.\n        this.createTree(true);\n    }\n}\n\n\n//# sourceURL=webpack://my-webpack-project/./src/classes/tasks.ts?");

/***/ }),

/***/ "./src/classes/timeline.ts":
/*!*********************************!*\
  !*** ./src/classes/timeline.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TimeLine\": () => (/* binding */ TimeLine)\n/* harmony export */ });\n/* harmony import */ var _utils_helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/helper */ \"./src/utils/helper.ts\");\n/* harmony import */ var _utils_scales__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/scales */ \"./src/utils/scales.ts\");\n\n\n\nclass TimeLine {\n    constructor(ctx, canvas, options, gantt) {\n        this.options = options;\n        this.canvas = canvas;\n        this.ctx = ctx;\n        this.gantt = gantt;\n        this.minDate = this.gantt.minDate;\n        this.maxDate = this.gantt.maxDate;\n        this.maxValue = this.gantt.maxValue;\n        this.minValue = this.gantt.minValue;\n    }\n    draw() {\n        let noOfYears = this.maxDate.getFullYear() - this.minDate.getFullYear() + 1;\n        let noOfMonths = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.monthDiff)(this.minDate, this.maxDate);\n        let noOfDays = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.dayDiff)(this.minDate, this.maxDate);\n        for (let i = 0; i < noOfDays; i++) {\n            let scaledX = (0,_utils_scales__WEBPACK_IMPORTED_MODULE_1__.scaleX)((0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.addDays)(this.minDate, i), this.minDate, this.maxDate, this.canvas.width);\n            let date = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.addDays)(this.minDate, i);\n            let dayName = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.getDayOfWeek)(date.getFullYear(), date.getMonth(), date.getDate() - 1);\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.drawBar)(this.ctx, scaledX, +(this.options.timeLineHeight * 3) / 4, this.options.timeLineColumnWidth, 30, this.options.timeLineBackgroundColor, date.getDate().toString());\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.drawBar)(this.ctx, scaledX, +(this.options.timeLineHeight * 2) / 4, this.options.timeLineColumnWidth, 30, this.options.timeLineBackgroundColor, dayName);\n            //   this.ctx.fillText(dayName, scaledX + , 85);\n            // line seperator between days\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.drawLine)(this.ctx, scaledX, +(this.options.timeLineHeight * 2) / 4, scaledX, this.canvas.height, \"lightgray\");\n        }\n        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.drawLine)(this.ctx, 0, +(this.options.timeLineHeight * 2) / 4, this.canvas.width + this.options.timeLineColumnWidth, +(this.options.timeLineHeight * 2) / 4, \"black\");\n        let offset = (this.options.timeLineHeight * 3) / 4;\n        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.drawLine)(this.ctx, 0, +offset, this.canvas.width + this.options.timeLineColumnWidth, +offset, \"black\");\n        let date = this.minDate;\n        // draw month timeline\n        while (date <= this.maxDate) {\n            let mnth = date.getMonth();\n            let year = date.getFullYear();\n            let day = date.getDate();\n            let monthName = _utils_helper__WEBPACK_IMPORTED_MODULE_0__.months[mnth];\n            let minScale = (0,_utils_scales__WEBPACK_IMPORTED_MODULE_1__.scaleX)(new Date(year, mnth, 0), this.minDate, this.maxDate, this.canvas.width);\n            let maxScale = (0,_utils_scales__WEBPACK_IMPORTED_MODULE_1__.scaleX)(new Date(year, mnth + 1, 0), this.minDate, this.maxDate, this.canvas.width);\n            let scaledX = (minScale + maxScale) / 2.0;\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.drawBar)(this.ctx, minScale + +this.options.timeLineColumnWidth, +this.options.timeLineHeight / 4, maxScale - minScale, 30, this.options.timeLineBackgroundColor, monthName);\n            mnth += 1;\n            date = new Date(year, mnth, day);\n            // month seperator\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.drawLine)(this.ctx, minScale + +this.options.timeLineColumnWidth, +this.options.timeLineHeight / 4, minScale + +this.options.timeLineColumnWidth, this.canvas.height + this.options.timeLineHeight, \"black\");\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.drawLine)(this.ctx, maxScale + +this.options.timeLineColumnWidth, +this.options.timeLineHeight / 4, maxScale + +this.options.timeLineColumnWidth, this.canvas.height + this.options.timeLineHeight, \"black\");\n        }\n        //topline above month names\n        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.drawLine)(this.ctx, 0, 0, this.canvas.width + this.options.timeLineColumnWidth, 0, \"black\");\n        for (let i = 0; i < noOfYears; i++) {\n            let fDayOfYear = new Date(this.minDate.getFullYear() + i, 0, 1);\n            let lDayOfYear = new Date(this.minDate.getFullYear() + i, 11, 31);\n            if (fDayOfYear < this.minDate) {\n                fDayOfYear = this.minDate;\n            }\n            if (lDayOfYear > this.maxDate) {\n                lDayOfYear = this.maxDate;\n            }\n            let minScale = (0,_utils_scales__WEBPACK_IMPORTED_MODULE_1__.scaleX)(fDayOfYear, this.minDate, this.maxDate, this.canvas.width);\n            let maxScale = (0,_utils_scales__WEBPACK_IMPORTED_MODULE_1__.scaleX)(lDayOfYear, this.minDate, this.maxDate, this.canvas.width);\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.drawBar)(this.ctx, minScale, 0, maxScale - minScale + this.options.timeLineColumnWidth, 30, this.options.timeLineBackgroundColor, fDayOfYear.getFullYear().toString());\n            //line under the year\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.drawLine)(this.ctx, minScale, +this.options.timeLineHeight / 4, maxScale + +this.options.timeLineColumnWidth, +this.options.timeLineHeight / 4, \"black\");\n            // line to the left of the year\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.drawLine)(this.ctx, minScale, 0, minScale, this.canvas.height, \"black\");\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_0__.drawLine)(this.ctx, maxScale + +this.options.timeLineColumnWidth, 0, maxScale + +this.options.timeLineColumnWidth, this.canvas.height, \"black\");\n        }\n    }\n    update(date) { }\n}\n\n\n//# sourceURL=webpack://my-webpack-project/./src/classes/timeline.ts?");

/***/ }),

/***/ "./src/data.ts":
/*!*********************!*\
  !*** ./src/data.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"scheduleData\": () => (/* binding */ scheduleData)\n/* harmony export */ });\nconst scheduleData = [\n    {\n        id: 1,\n        name: \"Task 1\",\n        start: new Date(2020, 3, 1),\n        end: new Date(2020, 3, 30),\n        parent: null,\n    },\n    {\n        id: 2,\n        name: \"Task 2\",\n        start: new Date(2020, 0, 12),\n        end: new Date(2020, 1, 28),\n        parent: 1,\n    },\n    {\n        id: 3,\n        name: \"Task 3\",\n        start: new Date(2020, 2, 1),\n        end: new Date(2020, 2, 30),\n        parent: 1,\n    },\n    {\n        id: 4,\n        name: \"Task 4\",\n        start: new Date(2020, 0, 1),\n        end: new Date(2020, 0, 30),\n        parent: 2,\n    },\n    {\n        id: 5,\n        name: \"Task 5\",\n        start: new Date(2020, 0, 12),\n        end: new Date(2020, 1, 28),\n        parent: 2,\n    },\n    {\n        id: 6,\n        name: \"Task 6\",\n        start: new Date(2020, 2, 1),\n        end: new Date(2020, 2, 30),\n        parent: 2,\n    },\n    {\n        id: 7,\n        name: \"Task 7\",\n        start: new Date(2020, 0, 1),\n        end: new Date(2020, 0, 30),\n        parent: 3,\n    },\n    {\n        id: 8,\n        name: \"Task 8\",\n        start: new Date(2020, 0, 12),\n        end: new Date(2020, 1, 28),\n        parent: 1,\n    },\n    {\n        id: 9,\n        name: \"Task 9\",\n        start: new Date(2020, 2, 1),\n        end: new Date(2020, 2, 30),\n        parent: 1,\n    },\n    {\n        id: 10,\n        name: \"Task 10\",\n        start: new Date(2020, 0, 1),\n        end: new Date(2020, 0, 30),\n        parent: 1,\n    },\n    {\n        id: 11,\n        name: \"Task 11\",\n        start: new Date(2020, 0, 12),\n        end: new Date(2020, 1, 28),\n        parent: 1,\n    },\n    {\n        id: 12,\n        name: \"Task 12\",\n        start: new Date(2020, 2, 1),\n        end: new Date(2020, 2, 30),\n        parent: 1,\n    },\n    {\n        id: 13,\n        name: \"Task 13\",\n        start: new Date(2020, 0, 1),\n        end: new Date(2020, 0, 30),\n        parent: 1,\n    },\n    {\n        id: 14,\n        name: \"Task 14\",\n        start: new Date(2020, 0, 12),\n        end: new Date(2020, 1, 28),\n        parent: 1,\n    },\n    {\n        id: 15,\n        name: \"Task 15\",\n        start: new Date(2020, 2, 1),\n        end: new Date(2020, 2, 30),\n        parent: 1,\n    },\n    {\n        id: 16,\n        name: \"Task 16\",\n        start: new Date(2020, 0, 1),\n        end: new Date(2020, 0, 30),\n        parent: 1,\n    },\n    {\n        id: 17,\n        name: \"Task 17\",\n        start: new Date(2020, 0, 12),\n        end: new Date(2020, 1, 28),\n        parent: 1,\n    },\n    {\n        id: 18,\n        name: \"Task 18\",\n        start: new Date(2020, 2, 1),\n        end: new Date(2020, 2, 30),\n        parent: 1,\n    },\n    {\n        id: 19,\n        name: \"Task 19\",\n        start: new Date(2020, 0, 1),\n        end: new Date(2020, 0, 30),\n        parent: 1,\n    },\n    {\n        id: 20,\n        name: \"Task 20\",\n        start: new Date(2020, 0, 12),\n        end: new Date(2020, 1, 28),\n        parent: 1,\n    },\n    {\n        id: 21,\n        name: \"Task 21\",\n        start: new Date(2020, 2, 1),\n        end: new Date(2020, 2, 30),\n        parent: 1,\n    },\n    {\n        id: 22,\n        name: \"Task 22\",\n        start: new Date(2020, 0, 1),\n        end: new Date(2020, 0, 30),\n        parent: 1,\n    },\n    {\n        id: 23,\n        name: \"Task 23\",\n        start: new Date(2020, 0, 12),\n        end: new Date(2020, 1, 28),\n        parent: 4,\n    },\n    {\n        id: 24,\n        name: \"Task 24\",\n        start: new Date(2020, 2, 1),\n        end: new Date(2020, 2, 30),\n        parent: 23,\n    },\n];\n\n\n//# sourceURL=webpack://my-webpack-project/./src/data.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data */ \"./src/data.ts\");\n/* harmony import */ var _classes_ganttChart__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./classes/ganttChart */ \"./src/classes/ganttChart.ts\");\n/* harmony import */ var _utils_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/helper */ \"./src/utils/helper.ts\");\n\n\n\nlet data = _data__WEBPACK_IMPORTED_MODULE_0__.scheduleData;\nlet gantt;\nfunction drawGantt() {\n    let container = document.getElementById(\"Chart\");\n    // chartCanvas.width = chartCanvas.parentElement.clientWidth;\n    // chartCanvas.height = 500;\n    let options = {\n        container: container,\n        dataDate: new Date(2020, 0, 15),\n        gridScale: 5,\n        gridColor: \"black\",\n        data: data,\n        titleOptions: \"Music\",\n        rowHeight: 40,\n        timeLineColumnWidth: 12,\n        timeLineBackgroundColor: \"yellow\",\n        timeLineHeight: 120,\n        tableWidth: 400,\n        table: {\n            width: 400,\n        },\n        barColor: \"lightgreen\",\n        barColorHover: \"red\",\n        colors: [\"#a55ca5\", \"#67b6c7\", \"#bccd7a\", \"#eb9743\"],\n    };\n    gantt = new _classes_ganttChart__WEBPACK_IMPORTED_MODULE_1__.GanttChart(options);\n    gantt.draw();\n}\ndrawGantt();\nlet btnZoomIn = document.getElementById(\"zoom-in\");\nbtnZoomIn.addEventListener(\"click\", () => {\n    gantt.options.timeLineColumnWidth += 5;\n    gantt.update();\n});\nlet btnZoomOut = document.getElementById(\"zoom-out\");\nbtnZoomOut.addEventListener(\"click\", () => {\n    if (gantt.options.timeLineColumnWidth > 5) {\n        gantt.options.timeLineColumnWidth -= 5;\n        gantt.update();\n    }\n});\nlet btnPlay = document.getElementById(\"play\");\nbtnPlay.addEventListener(\"click\", play);\nlet timer = undefined;\nfunction play() {\n    if (timer) {\n        clearInterval(timer);\n        timer = undefined;\n        btnPlay.innerHTML = \">\";\n        return;\n    }\n    let counter = 0;\n    btnPlay.innerHTML = \"||\";\n    timer = setInterval(() => {\n        if (timer && ++counter >= 100) {\n            clearInterval(timer);\n        }\n        gantt.dataDate = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.addDays)(gantt.dataDate, 1);\n        gantt.options.dataDate = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.addDays)(gantt.options.dataDate, counter);\n        gantt.update();\n    }, 1000);\n}\n\n\n//# sourceURL=webpack://my-webpack-project/./src/index.ts?");

/***/ }),

/***/ "./src/utils/helper.ts":
/*!*****************************!*\
  !*** ./src/utils/helper.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"addDays\": () => (/* binding */ addDays),\n/* harmony export */   \"createFormattedDateFromDate\": () => (/* binding */ createFormattedDateFromDate),\n/* harmony export */   \"createFormattedDateFromStr\": () => (/* binding */ createFormattedDateFromStr),\n/* harmony export */   \"dayDiff\": () => (/* binding */ dayDiff),\n/* harmony export */   \"drawBar\": () => (/* binding */ drawBar),\n/* harmony export */   \"drawLine\": () => (/* binding */ drawLine),\n/* harmony export */   \"getDayOfWeek\": () => (/* binding */ getDayOfWeek),\n/* harmony export */   \"getDaysInMonth\": () => (/* binding */ getDaysInMonth),\n/* harmony export */   \"minmax\": () => (/* binding */ minmax),\n/* harmony export */   \"monthDiff\": () => (/* binding */ monthDiff),\n/* harmony export */   \"months\": () => (/* binding */ months),\n/* harmony export */   \"recursive_offset\": () => (/* binding */ recursive_offset),\n/* harmony export */   \"toUTF16\": () => (/* binding */ toUTF16)\n/* harmony export */ });\n/**\n * This function draws a line given its coordinates and colour\n * @param {CanvasRenderingContext2D} ctx the canvas context\n * @param {number} startX the starting point of the line on the x axis\n * @param {number} startY the starting point of the line on the y axis\n * @param {number} endX the ending point of the line on the x axis\n * @param {number} endY the ending point of the line on the y axis\n * @param {string} color the color of the line\n */\nfunction drawLine(ctx, startX, startY, endX, endY, color) {\n    // ctx.globalCompositeOperation = \"destination-over\";\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = 1;\n    ctx.beginPath();\n    ctx.moveTo(startX, startY);\n    ctx.lineTo(endX, endY);\n    ctx.stroke();\n    ctx.restore();\n}\nfunction drawBar(ctx, upperLeftCornerX, upperLeftCornerY, width, height, color, text) {\n    ctx.save();\n    ctx.fillStyle = color;\n    ctx.fillRect(upperLeftCornerX, upperLeftCornerY, width, height);\n    if (text) {\n        // ctx.globalCompositeOperation = \"source-over\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        let fontSize = Math.min(12);\n        ctx.font = `${fontSize}px Arial`;\n        ctx.fillStyle = \"black\";\n        ctx.fillText(text, upperLeftCornerX + width / 2, upperLeftCornerY + height / 2, width);\n    }\n    ctx.restore();\n}\n/**\n *\n * @param {data} data the data to be processes\n * @returns an array containing the min and max date\n */\nfunction minmax(data) {\n    let max = new Date(0);\n    let min = data[0].start;\n    data.forEach((element) => {\n        if (element.end > max) {\n            max = element.end;\n        }\n        if (element.start < min) {\n            min = element.start;\n        }\n    });\n    return [min, max];\n}\n/**\n * compares two dates and returns the difference in months\n * @param {Date} firstMonth the first date of the period to compare\n * @param {Date} lastMonth the last date of the period to compare\n * @returns {number} a number representing the number of months between the two dates\n */\nfunction monthDiff(firstMonth, lastMonth) {\n    let months;\n    months = (lastMonth.getFullYear() - firstMonth.getFullYear()) * 12;\n    months -= firstMonth.getMonth();\n    months += lastMonth.getMonth();\n    return months <= 0 ? 0 : months;\n}\n/**\n * Compares two dates and returns the difference in days\n * @param {Date} startDate\n * @param {Date} endDate\n * @returns\n */\nfunction dayDiff(startDate, endDate) {\n    const difference = endDate.getTime() - startDate.getTime();\n    const days = Math.ceil(difference / (1000 * 3600 * 24)) + 1;\n    return days;\n}\n/**\n * This function returns the number of days in a given month\n * @param year the year number\n * @param month the month number\n * @returns {number} the number of days in the given month\n */\nfunction getDaysInMonth(year, month) {\n    return new Date(year, month, 0).getDate();\n}\n/**\n * This function the symbol of a day of the week given the year, month and day\n * @param year the year number\n * @param month the month number\n * @param day day number\n * @returns {string} day symbol as single character\n */\nfunction getDayOfWeek(year, month, day) {\n    const daysOfTheWeekArr = [\"M\", \"T\", \"W\", \"T\", \"F\", \"S\", \"S\"];\n    const dayOfTheWeekIndex = new Date(year, month, day).getDay();\n    return daysOfTheWeekArr[dayOfTheWeekIndex];\n}\n/**\n * Create a formatted date string\n * @param {number} year\n * @param {number} month\n * @param {number} day\n * @returns {string} a formatted date string\n */\nfunction createFormattedDateFromStr(year, month, day) {\n    let monthStr = month.toString();\n    let dayStr = day.toString();\n    if (monthStr.length === 1) {\n        monthStr = `0${monthStr}`;\n    }\n    if (dayStr.length === 1) {\n        dayStr = `0${dayStr}`;\n    }\n    return `${year}-${monthStr}-${dayStr}`;\n}\n/**\n * Formats a date object to a string\n * @param {Date}date the date to be formatted\n * @returns {string} a formatted date string\n */\nfunction createFormattedDateFromDate(date) {\n    let monthStr = (date.getMonth() + 1).toString();\n    let dayStr = date.getDate().toString();\n    if (monthStr.length === 1) {\n        monthStr = `0${monthStr}`;\n    }\n    if (dayStr.length === 1) {\n        dayStr = `0${dayStr}`;\n    }\n    return `${date.getFullYear()}-${monthStr}-${dayStr}`;\n}\n/**\n * Adds number of days to a date and return new date\n * @param date the original date\n * @param days number of days to be added\n * @returns {Date} the new date\n */\nfunction addDays(date, days) {\n    var result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n}\nconst months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n];\n/**\n * this function solve the issue of scrolling within a div and getting correction for mouse events\n * @param aobj the elemeent hosting the event\n * @returns\n */\nfunction recursive_offset(aobj) {\n    var currOffset = {\n        x: 0,\n        y: 0,\n    };\n    var newOffset = {\n        x: 0,\n        y: 0,\n    };\n    if (aobj !== null) {\n        if (aobj.scrollLeft) {\n            currOffset.x = aobj.scrollLeft;\n        }\n        if (aobj.scrollTop) {\n            currOffset.y = aobj.scrollTop;\n        }\n        if (aobj.offsetLeft) {\n            currOffset.x -= aobj.offsetLeft;\n        }\n        if (aobj.offsetTop) {\n            currOffset.y -= aobj.offsetTop;\n        }\n        if (aobj.parentNode !== undefined) {\n            newOffset = recursive_offset(aobj.parentNode);\n        }\n        currOffset.x = currOffset.x + newOffset.x;\n        currOffset.y = currOffset.y + newOffset.y;\n    }\n    return currOffset;\n}\nfunction toUTF16(codePoint) {\n    var TEN_BITS = parseInt(\"1111111111\", 2);\n    function u(codeUnit) {\n        return \"\\\\u\" + codeUnit.toString(16).toUpperCase();\n    }\n    if (codePoint <= 0xffff) {\n        return u(codePoint);\n    }\n    codePoint -= 0x10000;\n    // Shift right to get to most significant 10 bits\n    var leadSurrogate = 0xd800 + (codePoint >> 10);\n    // Mask to get least significant 10 bits\n    var tailSurrogate = 0xdc00 + (codePoint & TEN_BITS);\n    return u(leadSurrogate) + u(tailSurrogate);\n}\n\n\n//# sourceURL=webpack://my-webpack-project/./src/utils/helper.ts?");

/***/ }),

/***/ "./src/utils/scales.ts":
/*!*****************************!*\
  !*** ./src/utils/scales.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"scaleDate\": () => (/* binding */ scaleDate),\n/* harmony export */   \"scaleX\": () => (/* binding */ scaleX),\n/* harmony export */   \"scaleY\": () => (/* binding */ scaleY)\n/* harmony export */ });\n/**\n * Gets a date and returns a scaled value\n * @param  {Date} dateToSclae the date to convert into a scaled value\n * @param  {Date} minDate the min date of the chart\n * @param {Date} maxDate the max date of the chart\n * @param {number} canvasWidth the width of the canvas\n * @return {number} the scaled value\n */\nfunction scaleX(dateToSclae, minDate, maxDate, width) {\n    const min = minDate.getTime();\n    const max = maxDate.getTime();\n    const overallDuration = max - min;\n    const date = dateToSclae.getTime();\n    const scale = Math.ceil((date - min) * (width / overallDuration));\n    return scale;\n}\nfunction scaleY() {\n    // TODO\n}\n/**\n *\n * @param x the x coordinate of the point\n * @param minStart\n * @param overallDuration\n * @param canvasWidth\n * @returns the date corresponding to the x coordinate\n */\nfunction scaleDate(x, minStart, overallDuration, canvasWidth) {\n    let retDate = new Date(Math.ceil(minStart.getTime() + x * (overallDuration / canvasWidth)));\n    return retDate;\n}\n\n\n//# sourceURL=webpack://my-webpack-project/./src/utils/scales.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;